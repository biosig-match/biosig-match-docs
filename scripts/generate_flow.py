# scripts/generate_flow.py
import yaml
from pathlib import Path
import re
import os

def sanitize_id(text):
    """MermaidのノードIDとして使えるように文字列をサニタイズする"""
    # 記号やスペースをアンダースコアに置換
    s = re.sub(r'[\s:/\\-]', '_', text)
    # かっこや不要な文字を削除
    s = re.sub(r'[\[\]{}()"\'`]', '', s)
    return s

def main():
    # リポジトリのルートディレクトリを取得
    root_dir = Path(__file__).parent.parent
    
    nodes = {}
    edges = []

    # 全ての.mdファイルを再帰的に検索
    for md_file in root_dir.rglob("*.md"):
        # READMEとテンプレートは除外
        if "README" in md_file.name or "_templates" in str(md_file):
            continue

        try:
            content = md_file.read_text(encoding="utf-8")
            # ---で囲まれたYAMLフロントマターを抽出
            match = re.search(r'^---\s*\n(.*?)\n---\s*\n', content, re.DOTALL)
            
            if match:
                front_matter = yaml.safe_load(match.group(1))
                
                service_name = front_matter.get("service_name")
                if not service_name:
                    continue

                service_id = sanitize_id(service_name)
                nodes[service_id] = f'{service_id}["{service_name}"]'

                # inputsを処理
                if front_matter.get("inputs"):
                    for item in front_matter["inputs"]:
                        source = item.get("source")
                        if source:
                            source_id = sanitize_id(source)
                            nodes[source_id] = f'{source_id}("{source}")'
                            edges.append(f"{source_id} --> {service_id}")

                # outputsを処理
                if front_matter.get("outputs"):
                    for item in front_matter["outputs"]:
                        target = item.get("target")
                        if target:
                            target_id = sanitize_id(target)
                            nodes[target_id] = f'{target_id}("{target}")'
                            edges.append(f"{service_id} --> {target_id}")
        except Exception as e:
            print(f"Error processing file {md_file}: {e}")

    # Mermaidグラフのテキストを生成
    mermaid_text = "```mermaid\ngraph TD\n"
    for node in nodes.values():
        mermaid_text += f"    {node}\n"
    for edge in edges:
        mermaid_text += f"    {edge}\n"
    mermaid_text += "```"

    # 出力ファイルパス
    output_file = root_dir / "architecture" / "02_data-flow.md"
    
    output_content = f"""# Data Flow Diagram
(This file is auto-generated by a script. Do not edit manually.)

{mermaid_text}
"""
    # ファイルに書き込み
    output_file.write_text(output_content, encoding="utf-8")
    print(f"Successfully generated data flow diagram at: {output_file}")

if __name__ == "__main__":
    main()